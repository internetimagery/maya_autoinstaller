// Simple Script Installer. Created 20/04/2015 Jason Dixon.
// Edit the below:

$name = "testscript"; // Name of script (folder)
$shelf = "print \"Shelf Works.\""; // Code to go in a shelf icon (if any)
$auto = "print \"This should be visible if it works.\""; // Code in userSetup (if any)
$repo = "shot_pieces"; // Name of repo
$user = "internetimagery"; // Owner of repo

// DON'T CHANGE ANYTHING BELOW THIS LINE. :)

python("# Automatically install script\nfrom functools import wraps\nimport maya.cmds as cmds\nimport maya.mel as mel\nimport traceback\nimport zipfile\nimport urllib\nimport shutil\nimport json\nimport math\nimport sys\nimport re\nimport os\n\n\n## UTILITY CLASSES\ndef getMelVars():\n    \"\"\"\n    Grab user (and global) variables from Mel\n    \"\"\"\n    var = {}\n    var[\"scriptPath\"] = mel.eval(\"internalVar -usd;\")  # Script folder\n    var[\"name\"] = mel.eval(\"$tmp = $name\")  # Name of the script (folder)\n    var[\"shelf\"] = mel.eval(\"$tmp = $shelf\")  # Script to put in a shelf button (if any)\n    var[\"auto\"] = mel.eval(\"$tmp = $auto\")  # Code to put in userSetup (if any)\n    var[\"repo\"] = mel.eval(\"$tmp = $repo\")  # Name of repo\n    var[\"user\"] = mel.eval(\"$tmp = $user\")  # Owner of repo\n    var[\"shelfUI\"] = mel.eval('$tmp = $gShelfTopLevel')  # UI element of the Maya shelf\n    return var\n\n\ndef unique(item):\n    \"\"\"\n    Only keep one Class in memory at a time.\n    \"\"\"\n    items = {}\n\n    @wraps(item)\n    def UniqueItem(*args, **kwargs):\n        if (item in items and sys.getrefcount(items[item]) < 3) or item not in items:\n            items[item] = item(*args, **kwargs)\n        return items[item]\n    return UniqueItem\n\n\nclass call(object):\n    \"\"\"\n    Generic callback for buttons to pass values\n    \"\"\"\n    def __init__(self, func, *args, **kwargs):\n            self.func = func\n            self.args = args\n            self.kwargs = kwargs\n\n    def __call__(self, *args):\n            return self.func(*self.args, **self.kwargs)\n\n\n@unique\nclass Say(object):\n    \"\"\"\n    Logging output\n    \"\"\"\n    def __init__(self):\n        self.log = {}\n    \"\"\"\n    Register somewhere to show output and update progress\n    \"\"\"\n    def what(self, name, func):\n        self.log[name] = self.log.get(name, [])\n        self.log[name].append(func)\n        return self\n    \"\"\"\n    Update overall progress\n    \"\"\"\n    def when(self, progress):\n        try:\n            for func in self.log[\"update\"]:\n                func(progress)\n        except (KeyError, TypeError) as e:\n            print \"Warning:\", e\n    \"\"\"\n    Output message\n    \"\"\"\n    def it(self, message):\n        print message\n        try:\n            if self.log:\n                for func in self.log[\"log\"]:\n                    func(message)\n        except (KeyError, TypeError) as e:\n            print \"Warning:\", e\nsayhold = Say()  # Keep Say alive\n\n\n## Functionality\nclass MainWindow(object):\n    \"\"\"\n    Main window. For selecting initial options and providing feedback\n    \"\"\"\n    def __init__(self, title):\n        self.GUI = {}\n        self.title = title\n        self.GUI[\"window\"] = cmds.window(title=\"Script Installer\", rtf=True, s=False, mnb=False, mxb=False, ret=True)\n        self.GUI[\"wrapper\"] = cmds.columnLayout(adjustableColumn=True)\n        cmds.showWindow(self.GUI[\"window\"])\n        self._buildSelection()\n\n    def _buildSelection(self):\n        \"\"\"\n        Create Selection UI (main menu)\n        \"\"\"\n        self._clearFrame()\n        self.GUI[\"layout1\"] = cmds.columnLayout(adjustableColumn=True)\n        self.GUI[\"text1\"] = cmds.text(label=\"Features for %s.\" % self.title)\n        cmds.separator()\n        self.GUI[\"layout2\"] = cmds.rowColumnLayout(nc=2)\n        self.GUI[\"layout3\"] = cmds.columnLayout(adjustableColumn=True)\n        self.GUI[\"image1\"] = cmds.iconTextStaticLabel(image=\"choice.svg\", h=130, w=130)\n        cmds.setParent(\"..\")\n        self.GUI[\"layout4\"] = cmds.columnLayout(adjustableColumn=True)\n        self.GUI[\"text2\"] = cmds.text(label=\"What would you like to do?\", h=50)\n        self.GUI[\"button1\"] = cmds.iconTextButton(label=\"Install Script\", h=40, image=\"cluster.png\", st=\"iconAndTextHorizontal\", c=call(self._buildInstall))\n        self.GUI[\"button2\"] = cmds.iconTextButton(label=\"Remove Script\", h=40, image=\"deleteActive.png\", st=\"iconAndTextHorizontal\", c=call(self._buildRemove))\n        cmds.setParent(\"..\")\n        cmds.setParent(\"..\")\n        cmds.setParent(self.GUI[\"wrapper\"])\n\n    def _buildInstall(self):  # Install UI\n        \"\"\"\n        Create Install UI\n        \"\"\"\n        self._clearFrame()\n        self.GUI[\"layout1\"] = cmds.columnLayout(adjustableColumn=True)\n        self.GUI[\"progress1\"] = cmds.progressBar(w=500)\n        self.GUI[\"layout2\"] = cmds.scrollLayout(bgc=[0, 0, 0], cr=True, h=300)\n        self.GUI[\"text1\"] = cmds.text(label=\"\", align=\"left\")\n        cmds.setParent(\"..\")\n        cmds.setParent(self.GUI[\"wrapper\"])\n\n        def log(message):\n            try:\n                text = cmds.text(self.GUI[\"text1\"], q=True, label=True)\n                text = \"%s\\n:>   %s\" % (text, message)\n                cmds.text(self.GUI[\"text1\"], e=True, label=text)\n                cmds.scrollLayout(self.GUI[\"layout2\"], e=True, sp=\"down\")\n                cmds.refresh(cv=True)\n            except RuntimeError:\n                pass\n\n        def update(progress):\n            cmds.progressBar(self.GUI[\"progress1\"], e=True, s=progress)\n            cmds.refresh(cv=True)\n\n        Say().what(\"log\", log).what(\"update\", update)\n\n        Say().it(\"Installing script...\")\n        Say().it(\"\\n\")\n\n        self._install()\n\n    def _buildRemove(self):  # Uninstall UI\n        \"\"\"\n        Create Uninstall UI\n        \"\"\"\n        self._clearFrame()\n        self.GUI[\"text1\"] = cmds.text(label=\"Uninstalling Script.\", p=self.GUI[\"wrapper\"], h=50, w=400)\n        self.GUI[\"layout1\"] = cmds.scrollLayout(bgc=[0, 0, 0], cr=True, h=200)\n        self.GUI[\"text2\"] = cmds.text(label=\"\", align=\"left\")\n        cmds.setParent(\"..\")\n        cmds.setParent(self.GUI[\"wrapper\"])\n\n        def log(message):\n            try:\n                text = cmds.text(self.GUI[\"text2\"], q=True, label=True)\n                text = \"%s\\n:>   %s\" % (text, message)\n                cmds.text(self.GUI[\"text2\"], e=True, label=text)\n                cmds.scrollLayout(self.GUI[\"layout1\"], e=True, sp=\"down\")\n                cmds.refresh(cv=True)\n            except RuntimeError:\n                pass\n\n        Say().what(\"log\", log)\n        Say().it(\"Removing Script.\")\n        self._uninstall()\n\n    def _clearFrame(self):  # Clear the UI\n        \"\"\"\n        Clear UI for next build\n        \"\"\"\n        self.GUI[\"wrapper\"] = self.GUI.get(\"wrapper\", \"\")\n        if cmds.layout(self.GUI[\"wrapper\"], ex=True):\n            cmds.deleteUI(self.GUI[\"wrapper\"])\n        self.GUI[\"wrapper\"] = cmds.columnLayout(adjustableColumn=True, p=self.GUI[\"window\"])\n\n    def _install(self):\n        \"\"\"\n        Let the installation BEGIN!\n        \"\"\"\n        with Install() as i:\n            operations = math.ceil(100.0 / 6)  # Number of operations\n            Say().it(\"Checking online for latest script.\")\n            meta = i.getMetaInfo(i.repoUrl)\n            Say().it(\"Found version %s. Created on %s\" % (meta[\"version\"], meta[\"release\"]))\n            Say().when(operations)\n\n            def downloadUpdate(progress):\n                Say().when(progress * operations)\n\n            Say().it(\"Downloading from %s.\" % meta[\"download\"])\n            temp = i.download(meta[\"download\"], downloadUpdate)\n            Say().it(\"Download Complete. :)\")\n\n            Say().it(\"Extracting files.\")\n            folder = i.unzip(temp)\n            Say().when(operations)\n\n            Say().it(\"Copying script into place.\")\n            i.move(folder, i.scriptPath)\n            Say().when(operations)\n\n            if i.auto:\n                Say().it(\"Adding startup code.\")\n                with userSetup() as u:\n                    u.add(i.name, i.auto)\n            Say().when(operations)\n\n            if i.code:\n                Say().it(\"Adding shelf button to current shelf.\")\n                mayaShelf(i.shelf).add(i.name, i.code)\n            Say().when(operations)\n\n            Say().it(\"Install Complete!\")\n\n    def _uninstall(self):\n        \"\"\"\n        Remove script...\n        \"\"\"\n        with Install() as u:\n\n            Say().it(\"Removing Script files.\")\n            u.cleanup.append(u.scriptPath)\n            if u.auto:\n                Say().it(\"Cleaning userSetup.\")\n                with userSetup() as s:\n                    s.delete(u.name)\n            if u.code:\n                Say().it(\"Removing shelf icon.\")\n                mayaShelf(u.shelf).delete(u.name, u.code)\n\n        Say().it(\"YAY! Uninstall complete!\")\n\n\nclass Install(object):\n    \"\"\"\n    Run through installation process\n    \"\"\"\n    def __enter__(self):\n        # Script provided Info\n        pluginInfo = getMelVars()\n        self.name = pluginInfo[\"name\"]  # Name of script\n        self.code = pluginInfo[\"shelf\"]  # Code to put in a shelf icon.\n        self.auto = pluginInfo[\"auto\"]  # Code to put in userSetup\n        self.repo = pluginInfo[\"repo\"]  # name of Repository\n        self.user = pluginInfo[\"user\"]  # user of Repository\n        scriptDir = pluginInfo[\"scriptPath\"]  # Path to scripts\n        self.shelf = mel.eval('$tmp = $gShelfTopLevel')  # UI element of the Maya shelf\n\n        # Derived info\n        self.repoUrl = \"https://api.github.com/repos/%s/%s/releases/latest\" % (self.user, self.repo)\n        self.scriptPath = os.path.join(scriptDir, self.name)  # Place we will put the script\n        self.cleanup = []  # List of items to remove afterwards\n        return self\n\n    def getMetaInfo(self, url):\n        \"\"\"\n        Get download information from Repo\n        \"\"\"\n        u = urllib.urlopen(url)\n        data = json.load(u)\n        result = {}\n        result[\"version\"] = data[\"tag_name\"]\n        result[\"download\"] = data[\"zipball_url\"]\n        result[\"release\"] = re.match(\"(\\d{4}-\\d{2}-\\d{2})\", data[\"published_at\"]).group(1)\n        return result\n\n    def download(self, url, callback):\n        \"\"\"\n        Download the specified file and provide updates to the callback\n        \"\"\"\n\n        def update(i, block, size):\n            if i and size > 0:\n                step = 1 / math.ceil(float(size) / block)\n                callback(step)\n            elif size < 0:\n                callback(1.0)\n\n        f = urllib.urlretrieve(url, None, update)[0]\n        self.cleanup.append(f)\n        return f\n\n    def unzip(self, src):\n        z = zipfile.ZipFile(src, \"r\")\n        tmp = os.path.dirname(src)\n        folder = os.path.join(tmp, z.namelist()[0])\n        z.extractall(tmp)\n        self.cleanup.append(folder)\n        return folder\n\n    def move(self, src, dest):\n        if os.path.exists(dest):\n            self.delete(dest)\n        shutil.move(src, dest)\n        return dest\n\n    def delete(self, path):\n        try:\n            if os.path.isfile(path):\n                os.remove(path)\n                Say().it(\"Deleting file %s\" % path)\n            elif os.path.isdir(path):\n                shutil.rmtree(path)\n                Say().it(\"Removing folder %s\" % path)\n        except OSError as e:\n            Say().it(e)\n\n    def __exit__(self, errType, errValue, trace):\n        \"\"\"\n        Clean up after install, or if error occurrs\n        \"\"\"\n        if errType:\n            Say().it(\"Uh oh... there was a problem. :(\")\n            Say().it(\"%s :: %s\" % (errType.__name__, errValue))\n            Say().it(\"\\n\".join(traceback.format_tb(trace)))\n        Say().it(\"Cleaning up.\")\n        if self.cleanup:\n            for clean in self.cleanup:\n                self.delete(clean)\n        return True\n\n\nclass userSetup(object):\n    \"\"\"\n    Modfiy the startup script\n    \"\"\"\n    def __init__(self):\n        path = getMelVars()\n        self._path = os.path.join(path[\"scriptPath\"], \"userSetup.py\")\n        if os.path.exists(self._path):\n            with open(self._path, \"r\") as f:\n                self._data = f.read()\n        else:\n            self._data = \"\"\n\n    def __enter__(self):\n        search = r\"\\s*# # START\\s+(\\w+)\\s*\"  # Opening tag\n        search += r\"(.*?)\"  # Content\n        search += r\"\\s*# # END\\s+\\1\\s*\"  # Close tag\n        parse = re.compile(search, re.S)\n        self.code = {}\n        subpos = 0\n        newData = \"\"\n        for find in parse.finditer(self._data):\n            self.code[find.group(1)] = find.group(2)\n            pos = find.span()\n            newData += self._data[subpos:pos[0]] + \"\\n\"\n            subpos = pos[1]\n        newData += self._data[subpos:len(self._data)]\n        self._data = newData\n        return self\n\n    def __exit__(self, type, err, trace):\n        for k in self.code:\n            codeblock = \"\"\"\n# # START %s\n%s\n# # END %s\n\"\"\" % (k, self.code[k], k)\n            self._data += codeblock\n        with open(self._path, \"w\") as f:\n            f.write(self._data)\n\n    def add(self, key, val):\n        self.code[key] = val\n\n    def delete(self, key):\n        if key in self.code:\n            del self.code[key]\n\n\nclass mayaShelf(object):\n    \"\"\"\n    Access maya shelf and insert items.\n    \"\"\"\n    def __init__(self, shelf):\n        self.shelf = shelf\n\n    def add(self, name, code):\n        self._addToShelf(name, code)\n\n    def delete(self, name, code):\n        self._removeFromShelf(name, code)\n\n    def _addToShelf(self, name, code):\n        active = cmds.tabLayout(self.shelf, st=True, q=True)  # Grab active shelf\n        buttons = cmds.shelfLayout(active, q=True, ca=True)  # List all buttons in shelf\n        missing = True  # Shelf button exists here?\n        for b in buttons:\n            label = cmds.shelfButton(b, l=True, q=True)\n            if label == name:\n                cmds.shelfButton(b, e=True, c=code)\n                missing = False\n                Say().it(\"Updated existing shelf button.\")\n        if missing:\n            cmds.shelfButton(label=name, c=code, image=\"daisyLarge.png\", p=active)\n            Say().it(\"Created shelf button.\")\n\n    def _removeFromShelf(self, name, code):\n        allShelf = cmds.tabLayout(self.shelf, ca=True, q=True)\n        for s in allShelf:\n            buttons = cmds.shelfLayout(s, q=True, ca=True)\n            if buttons:\n                for b in buttons:\n                    label = cmds.shelfButton(b, q=True, l=True)\n                    command = cmds.shelfButton(b, q=True, c=True)\n                    if label == name and command == code:\n                        Say().it(\"Removing shelf button: %s.\" % b)\n                        cmds.deleteUI(b, ctl=True)\n\n\nif __name__ == \"__main__\":  # Are we running by being dragged into maya?\n    info = getMelVars()\n    MainWindow(info[\"name\"])\nelse:  # Else we're running in maya window normally. Lets set up some test variables\n    mel.eval(\"\"\"\n    $name = \"testScript\";\n    $shelf = \"print \\\\\"code here\\\\\"\";\n    $auto = \"print \\\\\"hello\\\\\"\";\n    $repo = \"shot_pieces\";\n    $user = \"internetimagery\";\n    \"\"\")\n    MainWindow(\"testScript\")\n");