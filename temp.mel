// py2mel.py v1.0.1, compiled 2015-04-22 23:24:54.377823

python("\nfrom functools import wraps\nimport maya.cmds as cmds\nimport collections\nimport json\nimport sys\nimport os\n\n\nclass FileInfo(collections.MutableMapping):\n    \n    def _encode(s, txt):\n        return json.dumps(txt)\n\n    def _decode(s, u):\n        try:\n            return json.loads(str(u.decode(\"unicode_escape\")))\n        except:\n            return str(u)\n\n    def _key(s, k):\n        if k in [\"application\", \"product\", \"version\", \"cutIdentifier\", \"osv\", \"license\"]:\n            return \"%s_\" % k\n        return k\n\n    def __init__(s):\n        s.data = dict()\n        init = cmds.fileInfo(q=True)\n        if init:\n            s.data = dict((k, s._decode(v)) for k, v in (lambda x: zip(x[::2], x[1::2]))(cmds.fileInfo(q=True)))\n        s.update(s.data)\n\n    def __getitem__(s, k):\n        k = s._key(k)\n        s.data[k] = s._decode(cmds.fileInfo(k, q=True)[0])\n        return s.data[k]\n\n    def __setitem__(s, k, v):\n        k = s._key(k)\n        cmds.fileInfo(k, s._encode(v))\n        s.data[k] = v\n\n    def __delitem__(s, k):\n        k = s._key(k)\n        cmds.fileInfo(rm=k)\n        del s.data[k]\n\n    def __iter__(s):\n        return iter(s.data)\n\n    def __len__(s):\n        return len(s.data)\n\n\nclass Scene(object):\n    \n    def __init__(s):\n        s.path = s._getPath()\n\n    def _getPath(s):\n        return cmds.file(q=True, sn=True)\n\n    def save(s):\n        print \"saving\"\n        s.path = s._getPath()\n        return s.path\n\n\ndef image(name):\n    \n    return os.path.join(os.path.dirname(os.path.realpath(__file__)), name)\n\n\nclass Callback(object):\n    \n    def __init__(self, func, *args, **kwargs):\n        self.func = func\n        self.args = args\n        self.kwargs = kwargs\n\n    def __call__(self, *args):\n        return self.func(*self.args, **self.kwargs)\n\n\ndef unique(item):\n    \n    items = {}\n\n    @wraps(item)\n    def UniqueItem(*args, **kwargs):\n        if (item in items and sys.getrefcount(items[item]) < 3) or item not in items:\n            items[item] = item(*args, **kwargs)\n        return items[item]\n    return UniqueItem\n\n\n@unique\nclass Event(object):\n    \n    def __init__(self):\n        self.events = {}\n\n    def register(self, eventname, event):\n        \n        self.events[eventname] = self.events.get(eventname, [])\n        self.events[eventname].append(event)\n\n    def fire(self, eventname, *args):\n        \n        if eventname in self.events:\n            for func in self.events[eventname]:\n                if callable(func):\n                    func(args)\nhold = Event()\n\n\n@unique\nclass Prefs(object):\n    \n\n    def __init__(self):\n        self.path = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"prefs.json\")\n        self._init()\n\n    def _init(self):\n        \n        try:\n            with open(self.path, \"r\") as f:\n                self.data = json.load(f)\n                self.data = self.data if self.data else {}\n        except IOError:\n            self.data = {}\n\n    def load(self, key):\n        if key in self.data:\n            return self.data[key]\n        return None\n\n    def save(self, key, val):\n        self.data[key] = val\n        with open(self.path, \"w\") as f:\n            json.dump(self.data, f)\n        return True\nstay = Prefs()\n\n\n@unique\nclass LocalStore(object):\n    \n    def __init__(self):\n        self.name = \"TODO\"\n        self.data = {}\n        keys = [val for i, val in enumerate(cmds.fileInfo(q=True)) if not i % 2 and self.name in val]\n        if keys:\n            for key in keys:\n                self.data[key] = json.loads(cmds.fileInfo(key, q=True)[0].decode(\"unicode_escape\"))\n\n    def _uid(self):\n        \n        i = 0\n\n        def unique(index):\n            return \"%s_%s\" % (self.name, index)\n        name = unique(i)\n        while name in self.data:\n            i += 1\n            name = unique(i)\n        return name\n\n    def create(self):\n        \n        uid = self._uid()\n        self.data[uid] = \"\"\n        return uid\n\n    def load(self, key):\n        \n        if key in self.data:\n            return self.data[key]\n        return None\n\n    def save(self, key, val):\n        \n        cmds.fileInfo(key, json.dumps(val))\n        if key not in self.data:\n            self.data[key] = val\n        return True\n\n    def delete(self, key):\n        \n        if key in self.data:\n            cmds.fileInfo(rm=key)\n            del self.data[key]\n            return True\n        return False\nkeep = LocalStore()\n\n\n@unique\nclass MainWindow(object):\n    \n    def __init__(s):\n        s.data = FileInfo()\n        s.data[\"todo_location\"] = s.data.get(\"todo_location\", \"float\")\n        s.data[\"todo_list\"] = s.data.get(\"todo_list\", {})\n\n        s.todos = {}  \n        title = \"TODO:\"\n\n        window = cmds.window(title=title)\n        s.container = cmds.columnLayout(adjustableColumn=True)\n        s.wrapper = \"\"\n\n        allowed_areas = ['right', 'left']\n        s.dock = cmds.dockControl(a='left', content=window, aa=allowed_areas, fl=True, l=title, fcc=s.moveDock, vcc=s.closeDock)\n\n        s._buildTodo()\n\n        if s.data[\"todo_location\"] == 'float':\n            cmds.dockControl(s.dock, e=True, fl=True)\n        elif s.data[\"todo_location\"] in allowed_areas:\n            cmds.dockControl(s.dock, e=True, a=s.data[\"todo_location\"], fl=False)\n\n    def _clear(self):\n        \n        if cmds.layout(self.wrapper, ex=True):\n            cmds.deleteUI(self.wrapper)\n        self.wrapper = cmds.columnLayout(adjustableColumn=True, p=self.container)\n\n    def _buildTodo(self, *args):\n        \n        self._clear()\n        cmds.columnLayout(adjustableColumn=True)\n        cmds.iconTextButton(h=30, image=\"attributes.png\", label=\"Settings ->\", style=\"iconAndTextHorizontal\", c=self._buildSettings)\n        cmds.separator()\n        self.text = cmds.textField()\n        cmds.button(label=\"Create a new TODO\", h=40, c=lambda x: self.createTodo())\n        self.todowrap = cmds.scrollLayout(bgc=[0.2, 0.2, 0.2], cr=True)\n        for i in range(10):\n            self.createTodo(LocalStore().create())\n        cmds.setParent(\"..\")\n        cmds.setParent(self.wrapper)\n\n    def _buildSettings(self, *args):\n        \n        self._clear()\n        cmds.columnLayout(adjustableColumn=True)\n        cmds.iconTextButton(h=30, image=\"revealSelected.png\", label=\"<- Todo\", style=\"iconAndTextHorizontal\", c=self._buildTodo)\n        cmds.separator()\n        cmds.text(label=\"SETTINGS IN HERE\")\n        cmds.button(l='Click Me')\n        cmds.setParent(self.wrapper)\n\n    def addTodo(self):\n        pass\n\n    def createTodo(self, uid=False):\n        \n        if uid:\n            if uid in self.todos:\n                todo = self.todos[uid]\n                todo.data = \"\"\n            else:\n                self.todos[uid] = Todo(uid, self.todowrap)\n        else:\n            self.cleanup.append(ModifyTodo(self.createTodo).window)\n\n    def removeTodo(self, uid):\n        print \"removing\", uid\n\n    def moveDock(self):  \n        if cmds.dockControl(self.dock, q=True, fl=True):\n            self.setLocation(\"float\")\n            print \"Floating Dock.\"\n        else:\n            area = cmds.dockControl(self.dock, q=True, a=True)\n            self.setLocation(area)\n            print \"Docking %s.\" % area\n\n    def closeDock(s, *loop):\n        visible = cmds.dockControl(s.dock, q=True, vis=True)\n        if not visible and loop:\n            cmds.scriptJob(ie=s.closeDock, p=s.dock, ro=True)\n        elif not visible:\n            cmds.deleteUI(s.dock, ctl=True)\n            if s.cleanup:\n                for clean in s.cleanup:\n                    if cmds.window(clean, ex=True):\n                        cmds.deleteUI(clean, wnd=True)\n            print \"Window closed.\"\n\n    def getLocation(s):\n        pass\n\n    def setLocation(s, l):\n        s.data[\"todo_location\"] = l\n\n\n@unique\nclass ModifyTodo(object):\n    \n    def __init__(self, callback, uid=False, data=False):\n        self.callback = callback\n        self.uid = uid if uid else LocalStore().create()\n        self.data = data if data else {\"label\": \"\"}\n\n        self.window = cmds.window(title=\"Create a new Todo\")\n        cmds.columnLayout(adjustableColumn=True)\n        self.name = cmds.textField(ec=self._save, tx=self.data[\"label\"])\n        cmds.button(label=\"Add Todo\", c=self._save)\n        cmds.showWindow(self.window)\n\n    def _save(self, *args):\n        self.data[\"label\"] = cmds.textField(self.name, q=True, tx=True)\n        if self.label:\n            cmds.deleteUI(self.window, wnd=True)\n            LocalStore().save(self.uid, self.data)\n            self.callback(self.uid)\n\n\nclass Todo(object):\n    \n    def __init__(self, uid, parent):\n        self.uid = uid\n        self.parent = parent\n        data = LocalStore().load(uid)\n        self.data = data if data else {\"label\": uid}\n        self.create()\n\n    def create(self):\n        \n        self.wrapper = cmds.rowColumnLayout(nc=3, p=self.parent)\n        self.check = cmds.iconTextCheckBox(image=\"Bookmark.png\", style=\"iconOnly\", w=50, onc=self._check)\n        self.label = cmds.iconTextCheckBox(label=self.data[\"label\"], image=image(\"check_off.png\"), style=\"textOnly\", w=200, onc=self._check)\n        self.trash = cmds.iconTextButton(image=\"removeRenderable.png\", style=\"iconOnly\", c=self._delete, w=50)\n\n    def save(self):\n        \n        pass\n\n    def _delete(self, *args):\n        \n        cmds.deleteUI(self.wrapper)\n\n    def _check(self, *arg):\n        \n        cmds.iconTextCheckBox(self.check, e=True, en=False)\n        Event().fire(\"checked\", self)\n        cmds.deleteUI(self.label)\n        cmds.deleteUI(self.trash)\n        cmds.rowColumnLayout(self.wrapper, e=True, nc=2)\n        self.progress = cmds.progressBar(w=250, p=self.wrapper)\n        import time\n        for p in range(10):\n            self._update(p * 10)\n            time.sleep(0.3)\n        self._delete()\n\n    def _update(self, prog):\n        cmds.progressBar(self.progress, e=True, pr=prog)\n        cmds.refresh(cv=True)\n\n\n\n\ndef test(message):\n    print message\n\nEvent().register(\"checked\", test)\n\nMainWindow()\n");